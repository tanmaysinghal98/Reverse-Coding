from django.shortcuts import render,redirect
from models import Players,Question,Qattempt,Feedback
from django.contrib.auth.models import User
from django.contrib.auth import authenticate,login,logout
from django.http import HttpResponse
from random import randint
import datetime

def home(request):
	return render(request,'regi.html')

def ques_page(request):
	return render(request,'question_make.html')

def ques(request):
	if request.method == "POST":
		Question.objects.create(question=request.POST['question_text'],correct_option=request.POST['correct'],level=request.POST['level'])
		return render(request,'question_make.html')

def createuser(request):
	if request.method == "POST":
		#if User.objects.filter().exists():
		for i in User.objects.all():
			if request.POST['regusername'] == i.username:
				print "username already taken"
				return render(request,'regi.html')
			
		user=User.objects.create_user(username=request.POST['regusername'],password=request.POST['reguserpassword'])
		q=Players.objects.create(pname1=request.POST['Player1'],phone1=request.POST['Player1no'],email1=request.POST['Player1email'],pname2=request.POST['Player2'],phone2=request.POST['Player2no'],email2=request.POST['Player2email'],level=request.POST['LEVEL'],user=user)
		username=request.POST['regusername']
		password=request.POST['reguserpassword']		
		user=authenticate(username=username,password=password)
		if user is not None:
			login(request,user)
			return render(request,'instructions.html')
		else:
			return render(request,'regi.html')
	else:
		return render(request,'regi.html')

def time_start(request):
	u=request.user.players
	now=datetime.datetime.now()
	u.end_time=int(now.hour)*3600+int(now.minute)*60+int(now.second)+1500
	u.save()
	return Level(request)

def login_page(request):
	return render(request,'login.html')

def log_in(request): #need to combine with signup
	if request.method == "POST":
		username=request.POST['username']
		password=request.POST['userpassword']		
		user=authenticate(username=username,password=password)

		if user is not None:
			login(request,user)
			return Level(request)
		else:
			return render(request,'login.html')
	else:
		return render(request,'regi.html')

def log_out(request):
	res=request.user.players.total_score
	logout(request)
	return render(request,'rc_index.html',{'res':res})

def Level(request):
	if set_timezone(request)=="logout":
		return log_out(request)
	u=request.user.players
	#u.marks=4
	count=0
	for k in Question.objects.all():
		count=count+1
	i=randint(1,count)
	q1=Question.objects.get(id=i)
	if(q1.level==u.level):
		for q in Qattempt.objects.filter(user_id=request.user.id):
			if q.question_id==q1.id:
				return Level(request)
		else:
			Qattempt.objects.create(question=q1,user=request.user)
			return render(request,'rcr1.html',{'q1':q1})
	else:
		return Level(request)

def check(request):
	p=request.POST['id']
	u=request.user.players
	q1=Question.objects.get(id=p)
	attempted_opt=request.POST['correct']
	if q1.correct_option==attempted_opt and u.count==2:
		u.total_score=u.total_score+4
		u.right_count=u.right_count+1
	else:
		if u.count==2:
			u.previous_answer=attempted_opt
			u.save()
			return dis(request)
		elif q1.correct_option==attempted_opt and u.count==1:
			u.total_score=u.total_score+2
			u.right_count=u.right_count+1
			u.previous_answer="NULL"
		else:
			u.total_score=u.total_score-2
			u.wrong_count=u.wrong_count+1
			u.previous_answer="NULL"
		u.count=2
	u.questions_attempted=u.questions_attempted+1	
	u.save()
	return Level(request)

def dis(request):
	p=request.POST['id']
	u=request.user.players
	u.count=u.count-1
	q1=Question.objects.get(id=p)
	u.save()
	return render(request,'rcr1.html',{'q1':q1})

def set_timezone(request):
	u=request.user.players
	now=datetime.datetime.now()
	curr_time=int(now.hour)*3600+int(now.minute)*60+int(now.second)
	time=u.end_time-curr_time
	if time<=0:
		return "logout"
	else:
		return HttpResponse(time)

def result(request):
	return render(request,'rc_index.html')

def total_marks(request):
	return render(request,'display.html')	


def feed(request):
	w=request.POST['id']
	q3=Feedback.objects.get(id=w)
	return render(request,'feedback.html',{'q3':q3})
	attempted_opt=request.POST['option']
	if q3.Excellent==attempted_opt:
		q3.Excellent=q3.Excellent+1
	elif q3.VeryGood==attempted_opt:
		q3.VeryGood=q3.VeryGood+1
	elif q3.Good==attempted_opt:
		q3.Good=q3.Good+1
	elif q3.Average==attempted_opt:
		q3.Average=q3.Average+1
		q3.save()


"""
def detail(request,question_id):
	p=Question.objects.filter(id=question_id)
	user = User.objects.get(pk = request.user.id)
	print question_id
	print BASE_DIR
	context={'q':q,'user':user}
	return render(request,'detail.html',context)"""

    


